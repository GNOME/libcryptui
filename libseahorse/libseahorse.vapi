/* libseahorse.vapi generated by valac, do not modify. */

[CCode (cprefix = "Seahorse", lower_case_cprefix = "seahorse_")]
namespace Seahorse {
	[CCode (cheader_filename = "seahorse-commands.h")]
	public abstract class Commands : GLib.Object {
		public abstract void show_properties (Seahorse.Key key);
		public abstract void delete_keys (GLib.List<Seahorse.Key> keys) throws GLib.Error;
		public Seahorse.View view { get; construct; }
		public abstract GLib.Quark ktype { get; }
		public abstract Gtk.ActionGroup command_actions { get; }
		public abstract string# ui_definition { get; }
	}
	[CCode (cheader_filename = "seahorse-generator.h")]
	public abstract class Generator : GLib.Object {
		public abstract Gtk.ActionGroup actions { get; }
	}
	[CCode (cheader_filename = "seahorse-servers.h")]
	public class Servers : GLib.Object {
		public static GLib.SList<string> get_types ();
		public static string? get_description (string type);
		public static void register_type (string type, string description, Seahorse.ValidUriFunc validate);
		public static GLib.SList<string> get_uris ();
		public static GLib.SList<string> get_names ();
		public static bool is_valid_uri (string uri);
		public Servers ();
	}
	[CCode (cheader_filename = "seahorse-view.h")]
	public interface View : GLib.Object {
		public abstract GLib.List<weak Seahorse.Key> get_selected_keys ();
		public abstract void set_selected_keys (GLib.List<Seahorse.Key> keys);
		public abstract weak Seahorse.Key? get_selected_key_and_uid (out uint uid);
		public abstract Seahorse.Key? selected_key { get; set; }
		public abstract Seahorse.Keyset? current_keyset { get; }
		public abstract Gtk.Window window { get; }
		public signal void selection_changed ();
	}
	[CCode (cheader_filename = "seahorse-servers.h")]
	public static delegate bool ValidUriFunc (string uri);
}
