dnl Process this file with autoconf to produce a configure script.

AC_PREREQ(2.52)

AC_INIT(seahorse, 0.7.6)
AC_CONFIG_SRCDIR(src/main.c)
AM_INIT_AUTOMAKE(AC_PACKAGE_NAME, AC_PACKAGE_VERSION)
AM_CONFIG_HEADER(config.h)
AM_MAINTAINER_MODE

AC_PROG_INTLTOOL

AM_PROG_LIBTOOL
AM_GCONF_SOURCE_2

AC_CHECK_FUNCS(setresuid setresgid)
AC_CHECK_FUNCS(mlock)

PKG_CHECK_MODULES(SEAHORSE, libgnomeui-2.0 libglade-2.0
			    gtk+-2.0 >= 2.4.0 eel-2.0
			    gnome-mime-data-2.0
			    libbonobo-2.0 libbonoboui-2.0
			    bonobo-activation-2.0 gnome-vfs-2.0)

PLUGIN_LIBTOOL_FLAGS="-module -avoid-version"
AC_SUBST(PLUGIN_LIBTOOL_FLAGS)

dnl **************
dnl GnuPG >= 1.2.x
dnl **************
AC_ARG_ENABLE(gpg-check, 
	AC_HELP_STRING([--disable-gpg-check], [check GPG version (default is yes)]),
	DO_CHECK=$enableval, DO_CHECK=yes)
	
if test	"$DO_CHECK" = "yes"; then
  min_gnupg_version=1.2.1
  dsp_gnupg_version=1.2.x
  AC_PATH_PROG(GNUPG, gpg, no)
  ok="no"
  if test "$GNUPG" != "no"; then
  	AC_MSG_CHECKING(for GnuPG $dsp_gnupg_version)
  	req_major=`echo $min_gnupg_version | \
		sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\)/\1/'`
	req_minor=`echo $min_gnupg_version | \
		sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\)/\2/'`
	req_micro=`echo $min_gnupg_version | \
		sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\)/\3/'`
	gnupg_version=`$GNUPG --version | grep gpg`
	major=`echo $gnupg_version | \
		sed 's/^gpg (GnuPG) \([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\).*/\1/'`
	minor=`echo $gnupg_version | \
		sed 's/^gpg (GnuPG) \([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\).*/\2/'`
	micro=`echo $gnupg_version | \
		sed 's/^gpg (GnuPG) \([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\).*/\3/'`

	  if test "$major" -eq "$req_major"; then
	     if test "$minor" -eq "$req_minor"; then
	  	if test "$micro" -ge "$req_micro"; then
		       ok="yes"
	        fi
	     fi
	  fi
  fi
  
  if test "$ok" = "yes"; then
	AC_MSG_RESULT(yes)
  else
	AC_MSG_ERROR(Appropriate version of GnuPG not found. Please install version $dsp_gnupg_version)
  fi

fi


dnl **********
dnl GPGME
dnl **********

ok="no"
min_gpgme_version=1.0.0
AC_PATH_PROG(GPGME_CONFIG, gpgme-config, "failed")
if test $GPGME_CONFIG != "failed" ; then
      AC_MSG_CHECKING(for GPGME - version >= $min_gpgme_version)
      req_major=`echo $min_gpgme_version | \
		 sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\)/\1/'`
      req_minor=`echo $min_gpgme_version | \
                 sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\)/\2/'`
      req_micro=`echo $min_gpgme_version | \
                 sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\)/\3/'`
      gpgme_config_version=`$GPGME_CONFIG --version`
      major=`echo $gpgme_config_version | \
                 sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\).*/\1/'`
      minor=`echo $gpgme_config_version | \
                 sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\).*/\2/'`
      micro=`echo $gpgme_config_version | \
		 sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\).*/\3/'`

	if test "$major" -eq "$req_major"; then
	   if test "$minor" -eq "$req_minor"; then
	     if test "$micro" -ge "$req_micro"; then
	       ok="yes"
	     fi
	   fi
	fi
fi

if test $ok = "yes"; then
  GPGME_CFLAGS=`$GPGME_CONFIG --cflags`
  GPGME_LIBS=`$GPGME_CONFIG --libs`
  AC_MSG_RESULT(yes)
else
  AC_MSG_ERROR(GPGME $min_gpgme_version or later needed)
fi

dnl Find keyserver plugins
AC_PATH_PROG(gpgkeys_plugin, gpgkeys_ldap, ,
             [${libdir}/gnupg:$PATH:/usr/libexec/gnupg:/usr/lib/gnupg])

AM_CONDITIONAL(WITH_KEYSERVER, test -n "$gpgkeys_plugin")

if test -n "$gpgkeys_plugin"; then
	echo "enabling key server support"
	AC_DEFINE(WITH_KEYSERVER, 1, [Support for key server actions])
	AC_DEFINE_UNQUOTED(GPGKEYS_PLUGIN_PATH, "`dirname $gpgkeys_plugin`", [Path to GPG key plugins])
else
	echo "disabling key server support"
fi
             
SEAHORSE_CFLAGS="$SEAHORSE_CFLAGS $GPGME_CFLAGS -O0"
SEAHORSE_LIBS="$SEAHORSE_LIBS $GPGME_LIBS"

# Allow gedit plugin to be disabled
AC_ARG_ENABLE(gedit, 
	    AC_HELP_STRING([--disable-gedit],
	    [Don't compile gedit plugin]))

AM_CONDITIONAL(WITH_GEDIT, test "$enable_gedit" != "no")

# Gedit tests 
if test "$enable_gedit" = "no"; then
	echo "disabling gedit plugin"
else
	echo "enabling gedit plugin..."
	echo "checking for supported versions of gedit..."
	
	PKG_CHECK_MODULES(GEDIT, gedit-2.8 >= 2.8.0, , 
		[PKG_CHECK_MODULES(GEDIT, gedit-2.6 >= 2.6.0)])
	
	AC_SUBST(GEDIT_CFLAGS)
fi


# Allow agent to be disabled
AC_ARG_ENABLE(agent, 
	    AC_HELP_STRING([--disable-agent],
	    [Don't compile agent for passphrase caching]))

AM_CONDITIONAL(WITH_AGENT, test "$enable_agent" != "no")

if test "$enable_agent" = "no"; then
	echo "disabling password caching agent"
else
	echo "enabling password caching agent"
	AC_DEFINE_UNQUOTED(WITH_AGENT, 1, [Compile password caching 'agent' code])
fi


# Debug mode
AC_ARG_ENABLE(debug, 
	    AC_HELP_STRING([--enable-debug],
	    [Compile binaries in debug mode]))

if test "$enable_debug" = "yes"; then
  CFLAGS="$CFLAGS -g -O0 -Wall"
  AC_DEFINE_UNQUOTED(_DEBUG, 1, [In debug mode])
  echo "enabling debug compile mode"
else 
  dnl AC_DEFINE_UNQUOTED(G_DISABLE_ASSERT, 1, [Disable glib assertions])
  echo "disabling debug compile mode"
fi

AC_SUBST(SEAHORSE_CFLAGS)
AC_SUBST(SEAHORSE_LIBS)

AC_PATH_PROG(GLIB_GENMARSHAL, glib-genmarshal)

dnl *******************
dnl ***** gettext *****
dnl *******************

ALL_LINGUAS="az ca cs da de en_CA en_GB es eu fi fr hr hu it ja ml ms nl no pa pl pt pt_BR ru sk sl sq sr sr@Latn sv tr uk zh_CN"

GETTEXT_PACKAGE=seahorse
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE, "$GETTEXT_PACKAGE", [Name of the gettext domain.])

AM_GLIB_GNU_GETTEXT

dnl ******************************

AC_OUTPUT([
Makefile
seahorse.spec
libseahorse/Makefile
bonobo/Makefile
po/Makefile.in
help/Makefile
help/C/Makefile
data/Makefile
pixmaps/Makefile
src/Makefile
agent/Makefile
plugins/Makefile
plugins/nautilus/Makefile
plugins/gedit/Makefile
])
