dnl Process this file with autoconf to produce a configure script.

AC_PREREQ(2.52)

AC_INIT(seahorse, 0.9.0)
AC_CONFIG_SRCDIR(src/main.c)
AM_INIT_AUTOMAKE(AC_PACKAGE_NAME, AC_PACKAGE_VERSION)
AM_CONFIG_HEADER(config.h)
AM_MAINTAINER_MODE

AC_PROG_INTLTOOL

AM_PROG_LIBTOOL
AM_GCONF_SOURCE_2

dnl Get the off_t size right
AC_SYS_LARGEFILE
AC_TYPE_OFF_T
AC_FUNC_FSEEKO

AC_CHECK_FUNCS(setresuid setresgid)
AC_CHECK_FUNCS(strsep)
AC_CHECK_FUNCS(mlock)

PKG_CHECK_MODULES(SEAHORSE, libgnomeui-2.0 libglade-2.0 gconf-2.0
			      gtk+-2.0 >= 2.4.0 gnome-vfs-2.0)

AC_MSG_CHECKING([for some Win32 platform])
case "$host" in
  *-*-cygwin*|*-*-mingw*)
    platform_win32=yes
    ;;
  *)
    platform_win32=no
    ;;
esac
AC_MSG_RESULT([$platform_win32])
AM_CONDITIONAL(PLATFORM_WIN32, test "$platform_win32" = "yes")

AC_MSG_CHECKING([for native Win32])
case "$host" in
  *-*-mingw*)
    os_win32=yes
    ;;
  *)
    os_win32=no
    ;;
esac
AC_MSG_RESULT([$os_win32])
AM_CONDITIONAL(OS_WIN32, test "$os_win32" = "yes")

if test "$platform_win32" = "yes" ; then
	PLUGIN_LIBTOOL_FLAGS="-module -avoid-version -no-undefined"
else
	PLUGIN_LIBTOOL_FLAGS="-module -avoid-version"
fi
AC_SUBST(PLUGIN_LIBTOOL_FLAGS)

dnl *********************
dnl Accepted GPG versions
dnl *********************
AC_ARG_ENABLE(gpg-check, 
	AC_HELP_STRING([--disable-gpg-check], [check GPG version (default is yes)]),
	DO_CHECK=$enableval, DO_CHECK=yes)
	
if test	"$DO_CHECK" = "yes"; then
  major_versions="1"
  minor_versions="2 4"
  AC_PATH_PROG(GNUPG, gpg, no)
  ok="no"
  if test "$GNUPG" != "no"; then
  	AC_MSG_CHECKING(for appropriate GnuPG version)
	gnupg_version=`$GNUPG --version | grep gpg`
	major=`echo $gnupg_version | \
		sed 's/^gpg (GnuPG) \([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\).*/\1/'`
	minor=`echo $gnupg_version | \
		sed 's/^gpg (GnuPG) \([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\).*/\2/'`
	micro=`echo $gnupg_version | \
		sed 's/^gpg (GnuPG) \([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\).*/\3/'`
    
    for ver in $major_versions; do
      if test "$ver" = "$major"; then
            
        if test "1" = "$major"; then
          AC_DEFINE(GPG_MAJOR, 1,[GPG Major Version])
        fi
        
        # Check the minor version 
        for ver2 in $minor_versions; do
          if test "$ver2" = "$minor"; then
                    
            if test "2" = "$minor"; then
              AC_DEFINE(GPG_MINOR,2,[GPG Minor Version])
            fi
            
            if test "4" = "$minor"; then
              AC_DEFINE(GPG_MINOR,4,[GPG Minor Version])
            fi            
            
            ok="yes"
            break
                    
          fi
        done
        break
            
      fi
    done
    
  fi
  
  if test "$ok" = "yes"; then
	AC_MSG_RESULT(yes)
  else
	AC_MSG_ERROR(Appropriate version of GnuPG not found. Please install version 1.2.x or 1.4.x)
  fi

fi


dnl **********
dnl GPGME
dnl **********

ok="no"
min_gpgme_version=1.0.0
AC_PATH_PROG(GPGME_CONFIG, gpgme-config, "failed")
if test $GPGME_CONFIG != "failed" ; then
      AC_MSG_CHECKING(for GPGME - version >= $min_gpgme_version)
      req_major=`echo $min_gpgme_version | \
		 sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\)/\1/'`
      req_minor=`echo $min_gpgme_version | \
                 sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\)/\2/'`
      req_micro=`echo $min_gpgme_version | \
                 sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\)/\3/'`
      gpgme_config_version=`$GPGME_CONFIG --version`
      major=`echo $gpgme_config_version | \
                 sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\).*/\1/'`
      minor=`echo $gpgme_config_version | \
                 sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\).*/\2/'`
      micro=`echo $gpgme_config_version | \
		 sed 's/\([[0-9]]*\)\.\([[0-9]]*\)\.\([[0-9]]*\).*/\3/'`

	if test "$major" -eq "$req_major"; then
	   if test "$minor" -ge "$req_minor"; then
	     if test "$micro" -ge "$req_micro"; then
	       ok="yes"
	     fi
	   fi
	fi
fi

if test $ok = "yes"; then
  GPGME_CFLAGS=`$GPGME_CONFIG --cflags`
  GPGME_LIBS=`$GPGME_CONFIG --libs`
  AC_MSG_RESULT(yes)
else
  AC_MSG_ERROR(GPGME $min_gpgme_version or later needed)
fi

SEAHORSE_CFLAGS="$SEAHORSE_CFLAGS $GPGME_CFLAGS -O0"
SEAHORSE_LIBS="$SEAHORSE_LIBS $GPGME_LIBS"


dnl ***************
dnl LDAP [from gpg]
dnl ***************

AC_MSG_CHECKING([LDAP keyserver support])
AC_ARG_ENABLE(ldap,
[  --disable-ldap          disable LDAP keyserver interface],
    try_ldap=$enableval, try_ldap=yes)
AC_MSG_RESULT($try_ldap)
with_ldap=no

dnl Must check for network library requirements before doing link tests
dnl for ldap, for example. If ldap libs are static (or dynamic and without
dnl ELF runtime link paths), then link will fail and LDAP support won't
dnl be detected.

AC_CHECK_FUNC(gethostbyname, , AC_CHECK_LIB(nsl, gethostbyname,
	[NETLIBS="-lnsl $NETLIBS"]))
AC_CHECK_FUNC(setsockopt, , AC_CHECK_LIB(socket, setsockopt,
	[NETLIBS="-lsocket $NETLIBS"]))
	
dnl Try and link a LDAP test program to weed out unusable LDAP
dnl libraries.  -lldap [-llber [-lresolv]] is for OpenLDAP.  OpenLDAP in
dnl general is terrible with creating weird dependencies.  If all else
dnl fails, the user can play guess-the-dependency by using something
dnl like LDAP_LIBS="-lfoo" ./configure

if test "$try_ldap" = yes ; then
  for MY_LDAPLIBS in ${LDAP_LIBS+"$LDAP_LIBS"} "-lldap" "-lldap -llber" "-lldap -llber -lresolv"; do
    _ldap_save_libs=$LIBS
    LIBS="$MY_LDAPLIBS $NETLIBS $LIBS"

    AC_MSG_CHECKING([whether LDAP via \"$MY_LDAPLIBS\" is present and sane])
    AC_TRY_LINK([#include <ldap.h>],[ldap_open("foobar",1234);],
                [cv_func_ldap_init=yes],[cv_func_ldap_init=no])
    AC_MSG_RESULT([$cv_func_ldap_init])

    if test $cv_func_ldap_init = no; then
      AC_MSG_CHECKING([whether I can make LDAP be sane with lber.h])
      AC_TRY_LINK([#include <lber.h>
#include <ldap.h>],[ldap_open("foobar",1234);],
         [cv_func_ldaplber_init=yes],[cv_func_ldaplber_init=no])
      AC_MSG_RESULT([$cv_func_ldaplber_init])
    fi

    if test "$cv_func_ldaplber_init" = yes ; then
       AC_DEFINE(NEED_LBER_H,1,[Define if the LDAP library requires including lber.h before ldap.h])
    fi

    if test "$cv_func_ldap_init" = yes || \
  	test "$cv_func_ldaplber_init" = yes ; then
       LDAP_LIBS=$MY_LDAPLIBS
    fi

    LIBS=$_ldap_save_libs

    if test "$LDAP_LIBS" != ""; then 
    	with_keyserver=yes
        with_ldap=yes
		AC_DEFINE(WITH_LDAP, 1, [Support for LDAP operations])
    	break
    fi
  done
fi	

AM_CONDITIONAL(WITH_LDAP, test "$with_ldap" = "yes")
SEAHORSE_LIBS="$SEAHORSE_LIBS $LDAP_LIBS"


dnl ***************
dnl HKP (libsoup)
dnl ***************

# Allow hkp to be disabled 
AC_ARG_ENABLE(hkp,
        AC_HELP_STRING([--disable-hkp],
        [disable HKP keyserver interface]))

# HKP tests 
if test "$enable_hkp" = "no"; then
	echo "disabling HKP keyserver interface"
else
    
	echo "checking for supported versions of libsoup..."
	
	PKG_CHECK_MODULES(SOUP, libsoup-2.2, 
        [enable_hkp=yes],  
        [enable_hkp=no])

    if test "$enable_hkp" = yes; then
        with_keyserver=yes
		AC_DEFINE(WITH_HKP, 1, [Support for HKP operations])
        SEAHORSE_LIBS="$SEAHORSE_LIBS $SOUP_LIBS"
        SEAHORSE_CFLAGS="$SEAHORSE_CFLAGS $SOUP_CFLAGS"
    fi
fi

AM_CONDITIONAL(WITH_HKP, test "$enable_hkp" = "yes")


dnl ***************
dnl KEYSERVER
dnl ***************

AM_CONDITIONAL(WITH_KEYSERVER, test "$with_keyserver" = "yes")

if test "$with_keyserver" = "yes"; then
	echo "enabling key server support"
	AC_DEFINE(WITH_KEYSERVER, 1, [Support for key server actions])
else
    with_keyserver=no
	echo "disabling key server support"
fi

dnl ***************
dnl APPLET
dnl ***************

# Allow gedit plugin to be disabled
AC_ARG_ENABLE(applet, 
	    AC_HELP_STRING([--disable-applet],
	    [Don't compile panel applet]))

# Applet tests 
if test "$enable_applet" = "no"; then
	echo "disabling panel applet"
else
	echo "checking for supported versions of libpanelapplet..."
	
    PKG_CHECK_MODULES(GNOME_APPLETS, libpanelapplet-2.0 >= 2.9.4,
		[enable_applet=yes],
		[enable_applet=no])

	if test "$enable_applet" = "yes"; then
		echo "enabling panel applet..."
    	AC_SUBST(GNOME_APPLETS_CFLAGS)
    	AC_SUBST(GNOME_APPLETS_LIBS)
    	AC_DEFINE(WITH_APPLET, 1, [Panel applet code])
	fi
fi

AM_CONDITIONAL(WITH_APPLET, test "$enable_applet" = "yes")


dnl ***************
dnl GEDIT
dnl ***************

# Allow gedit plugin to be disabled
AC_ARG_ENABLE(gedit, 
	    AC_HELP_STRING([--disable-gedit],
	    [Don't compile gedit plugin]))

# Gedit tests 
if test "$enable_gedit" = "no"; then
	echo "disabling gedit plugin"
else
    enable_gedit=yes
	echo "enabling gedit plugin..."
	echo "checking for supported versions of gedit..."
	
	PKG_CHECK_MODULES(GEDIT, gedit-2.12 >= 2.12.0, [enable_gedit=yes],
		[PKG_CHECK_MODULES(GEDIT, gedit-2.10 >= 2.9.0, [enable_gedit=yes], 
    		[PKG_CHECK_MODULES(GEDIT, gedit-2.8 >= 2.8.0, [enable_gedit=yes], 
	    		[PKG_CHECK_MODULES(GEDIT, gedit-2.6 >= 2.6.0, [enable_gedit=yes],
					[enable_gedit=no])])])])
	
	if test "$enable_gedit" = "yes"; then
		echo "enabling gedit plugin..."
		AC_SUBST(GEDIT_CFLAGS)
		AC_SUBST(GEDIT_LIBS)
	fi
fi

AM_CONDITIONAL(WITH_GEDIT, test "$enable_gedit" = "yes")


dnl ***************
dnl NAUTILUS
dnl ***************

# Allow nautilus plugin to be disabled
AC_ARG_ENABLE(nautilus, 
	    AC_HELP_STRING([--disable-nautilus],
	    [Don't compile nautilus plugin]))

with_nautilus_ext=no
with_nautilus=no

# Nautilus tests 
if test "$enable_nautilus" = "no"; then
	echo "disabling nautilus plugin"
else
    enable_nautilus=yes
	echo "enabling nautilus plugin..."
	echo "checking for supported versions of nautilus..."

	PKG_CHECK_MODULES(NAUTILUS, libnautilus-extension >= 2.9.0 glib-2.0 >= 2.6.0, , 
        [PKG_CHECK_MODULES(BONOBO, libbonobo-2.0 libbonoboui-2.0 bonobo-activation-2.0 )])

    # The new Nautilus extension
    if test -n "$NAUTILUS_CFLAGS"; then
        with_nautilus_ext=yes
    	AC_SUBST(NAUTILUS_CFLAGS)
	    AC_SUBST(NAUTILUS_LIBS)
        
    # The old Bonobo Nautilus extension
    elif test -n "$BONOBO_CFLAGS"; then
        with_nautilus=yes
    	AC_SUBST(BONOBO_CFLAGS)
	    AC_SUBST(BONOBO_LIBS)
    fi

fi

AM_CONDITIONAL(WITH_NAUTILUS_EXT, test "$with_nautilus_ext" = "yes")
AM_CONDITIONAL(WITH_NAUTILUS, test "$with_nautilus" = "yes")


dnl ***************
dnl AGENT
dnl ***************

# Allow agent to be disabled
AC_ARG_ENABLE(agent, 
	    AC_HELP_STRING([--disable-agent],
	    [Don't compile agent for passphrase caching]))

AM_CONDITIONAL(WITH_AGENT, test "$enable_agent" != "no")

if test "$enable_agent" = "no"; then
	echo "disabling password caching agent"
else
    enable_agent=yes
	echo "enabling password caching agent"
	AC_DEFINE_UNQUOTED(WITH_AGENT, 1, [Compile password caching 'agent' code])
fi


dnl *******************
dnl KEY SHARING 
dnl *******************

# Allow sharing to be disabled
AC_ARG_ENABLE(sharing, 
        AC_HELP_STRING([--disable-sharing],
        [Don't compile in DNS-SD key sharing]))

if test "$enable_hkp" != "yes"; then
    echo "DNS-SD key sharing requires HKP support"
    enable_sharing=no
fi

if test "$enable_sharing" = "no"; then
    echo "disabling DNS-SD key sharing"
else

    PKG_CHECK_MODULES(SHARING, avahi-glib >= 0.6)
    if test -n "$SHARING_CFLAGS"; then
        echo "enabling key sharing"
        enable_sharing=yes
    fi

    SEAHORSE_CFLAGS="$SEAHORSE_CFLAGS $SHARING_CFLAGS"
    SEAHORSE_LIBS="$SEAHORSE_LIBS $SHARING_LIBS"
    
    AC_DEFINE_UNQUOTED(WITH_SHARING, 1, [Compile bonjour key sharing code])
fi

AM_CONDITIONAL(WITH_SHARING, test "$enable_sharing" != "no")


dnl *******************
dnl DBUS
dnl *******************

DBUS_GLIB_REQUIRED=0.35

# Allow DBUS to be disabled
AC_ARG_ENABLE(dbus, 
	    AC_HELP_STRING([--disable-dbus],
	    [Don't compile in key sharing]))

if test "x$enable_dbus" = "xno"; then
    echo "disabling dbus"
else

    PKG_CHECK_MODULES([DBUS], [dbus-glib-1 >= $DBUS_GLIB_REQUIRED],
	                  [enable_dbus=yes],[enable_dbus=no])
    if test "$enable_dbus" = "yes"; then
        AC_SUBST([DBUS_CFLAGS])
        AC_SUBST([DBUS_LIBS])

        AC_PATH_PROG([DBUS_BINDING_TOOL], [dbus-binding-tool], [no])

        if test x$DBUS_BINDING_TOOL = "xno" ; then
        	AC_MSG_ERROR([dbus-binding-tool executable not found in your path - should be installed with dbus glib bindings])
        fi                                            

        AC_DEFINE([WITH_DBUS],[1],[Define if DBUS support is enabled])

        SEAHORSE_CFLAGS="$SEAHORSE_CFLAGS $DBUS_CFLAGS"
        SEAHORSE_LIBS="$SEAHORSE_LIBS $DBUS_LIBS"
        
        PKG_CHECK_MODULES(LIBCRYPTUI, gtk+-2.0 >= 2.4.0)
        LIBCRYPTUI_CFLAGS="$LIBCRYPTUI_CFLAGS $DBUS_CFLAGS"
        LIBCRYPTUI_LIBS="$LIBCRYPTUI_LIBS $DBUS_LIBS" 
        
        AC_SUBST(LIBCRYPTUI_CFLAGS)
        AC_SUBST(LIBCRYPTUI_LIBS)
    fi
fi

AM_CONDITIONAL(WITH_DBUS, test "$enable_dbus" != "no")
   
dnl *******************
dnl LIBNOTIFY
dnl *******************

LIBNOTIFY_REQUIRED=0.2

# Allow libnotify to be disabled
AC_ARG_ENABLE(libnotify, 
	    AC_HELP_STRING([--disable-libnotify],
	    [Don't compile in libnotify support]))   
        
if test "x$enable_libnotify" = "xno"; then
    echo "disabling libnotify support"
else

    PKG_CHECK_MODULES(LIBNOTIFY, [libnotify >= $LIBNOTIFY_REQUIRED], 
                      enable_libnotify=yes, enable_libnotify=no)
    if test "$enable_libnotify" = "yes"; then
        
        AC_DEFINE(HAVE_LIBNOTIFY, 1, [libnotify available])
        
        SEAHORSE_CFLAGS="$SEAHORSE_CFLAGS $LIBNOTIFY_CFLAGS"
        SEAHORSE_LIBS="$SEAHORSE_LIBS $LIBNOTIFY_LIBS"
    fi
fi

dnl ****************************************************************************
dnl  SSH 
dnl ****************************************************************************

AC_ARG_ENABLE(ssh,
        AC_HELP_STRING([--disable-ssh], 
        [Support for managing SSH keys]))
        
if test "x$enable_ssh" = "xno"; then
    echo "disabling ssh support"
else

    AC_PATH_PROG(SSH_KEYGEN_PATH, ssh-keygen, "failed")
    AC_PATH_PROG(SSH_PATH, ssh, "failed")
    
    if test $SSH_KEYGEN_PATH != "failed" && test $SSH_PATH != "failed"; then
        enable_ssh="yes"
        AC_DEFINE(WITH_SSH, 1, [With SSH Support])
        AC_DEFINE_UNQUOTED(SSH_KEYGEN_PATH, "$SSH_KEYGEN_PATH", [Path to ssh-keygen])
        AC_DEFINE_UNQUOTED(SSH_PATH, "$SSH_PATH", [Path to ssh])
    fi
    
fi

AM_CONDITIONAL(WITH_SSH, test "$enable_ssh" == "yes")


dnl ****************************************************************************

# Debug mode
AC_ARG_ENABLE(debug, 
	    AC_HELP_STRING([--enable-debug],
	    [Compile binaries in debug mode]))

if test "$enable_debug" = "yes"; then
  CFLAGS="$CFLAGS -g -O0 -Wall"
  AC_DEFINE_UNQUOTED(_DEBUG, 1, [In debug mode])
  echo "enabling debug compile mode"
else 
  dnl AC_DEFINE_UNQUOTED(G_DISABLE_ASSERT, 1, [Disable glib assertions])
  echo "disabling debug compile mode"
fi

# Fatal Messages mode
AC_ARG_ENABLE(fatal-messages, 
	    AC_HELP_STRING([--enable-fatal-messages],
	    [Don't make compile and or runtime messages fatal in debug mode.]))

if test "$enable_fatal_messages" = "yes" && test "$enable_debug" = "yes"; then
    CFLAGS="$CFLAGS -Werror"
    AC_DEFINE_UNQUOTED(FATAL_MESSAGES, 1, [Fatal runtime messages])
    echo "enabling fatal runtime messages"
fi

# Build Tests
AC_ARG_ENABLE(tests,
        AC_HELP_STRING([--enable-tests],
        [Compile Test Programs]))
        
if test "$enable_tests" != "yes"; then
    enable_tests="no"
fi

AM_CONDITIONAL(WITH_TESTS, test "$enable_tests" == "yes")

dnl ****************************************************************************

AC_SUBST(SEAHORSE_CFLAGS)
AC_SUBST(SEAHORSE_LIBS)

AC_PATH_PROG(GLIB_GENMARSHAL, glib-genmarshal)

AC_ARG_ENABLE(update-mime-database,
	AC_HELP_STRING([--disable-update-mime-database],
	[do not run the update-mime-database utility (mostly useful for package maintainers) ]))
AM_CONDITIONAL(UPDATE_MIME_DATABASE, test "$enable_update_mime_database" != "no")

dnl *******************
dnl ***** gettext *****
dnl *******************

ALL_LINGUAS="az bg ca cs da de en_CA en_GB es eu fi fr hr hu it ja ml ms nb ne nl no pa pl pt pt_BR ru rw sk sl sq sr sr@Latn sv tr uk zh_CN zh_TW"

GETTEXT_PACKAGE=seahorse
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE, "$GETTEXT_PACKAGE", [Name of the gettext domain.])

AM_GLIB_GNU_GETTEXT

dnl ****************************************************************************

AC_OUTPUT([
Makefile
seahorse.spec
libcryptui/Makefile
libcryptui/tests/Makefile
libseahorse/Makefile
bonobo/Makefile
po/Makefile.in
help/Makefile
help/C/Makefile
data/Makefile
pixmaps/Makefile
src/Makefile
agent/Makefile
daemon/Makefile
plugins/Makefile
plugins/applet/Makefile
plugins/applet/docs/Makefile
plugins/applet/docs/C/Makefile
plugins/nautilus/Makefile
plugins/nautilus-ext/Makefile
plugins/gedit/Makefile
])

dnl ****************************************************************************
dnl  SUMMARY
dnl ****************************************************************************

echo "
GnuPG Version:           $gnupg_version
GPGME Version:           $gpgme_config_version
SSH Support:             $enable_ssh
Keyserver Support:       $with_keyserver
  LDAP:                  $with_ldap
  HKP:                   $enable_hkp
DBUS Support:            $enable_dbus
  libcryptui:            $enable_dbus
Plugins: 
  Seahorse Agent:        $enable_agent
  GEdit:                 $enable_gedit
  Panel Applet:          $enable_applet
  Nautilus (v < 2.8):    $with_nautilus
  Nautilus (v > 2.10):   $with_nautilus_ext
Key Sharing:             $enable_sharing
Notification Support:    $enable_libnotify
"
