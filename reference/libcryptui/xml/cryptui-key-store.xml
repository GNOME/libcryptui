<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
               "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<refentry id="CryptUIKeyStore">
<refmeta>
<refentrytitle role="top_of_page" id="CryptUIKeyStore.top_of_page">CryptUIKeyStore</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>LIBCRYPTUI Library</refmiscinfo>
</refmeta>

<refnamediv>
<refname>CryptUIKeyStore</refname>
<refpurpose></refpurpose>
<!--[<xref linkend="desc" endterm="desc.title"/>]-->
</refnamediv>

<refsynopsisdiv id="CryptUIKeyStore.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>
                    <link linkend="CryptUIKeyStorePriv">CryptUIKeyStorePriv</link>;
                    <link linkend="CryptUIKeyStore-struct">CryptUIKeyStore</link>;
enum                <link linkend="CryptUIKeyStoreMode">CryptUIKeyStoreMode</link>;
<link linkend="gboolean">gboolean</link>            (<link linkend="CryptUIKeyStoreFilterFunc">*CryptUIKeyStoreFilterFunc</link>)        (<link linkend="CryptUIKeyset">CryptUIKeyset</link> *ckset,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="gpointer">gpointer</link> user_data);
<link linkend="CryptUIKeyStore">CryptUIKeyStore</link>*    <link linkend="cryptui-key-store-new">cryptui_key_store_new</link>               (<link linkend="CryptUIKeyset">CryptUIKeyset</link> *keyset,
                                                         <link linkend="gboolean">gboolean</link> use_checks,
                                                         const <link linkend="gchar">gchar</link> *none_option);
<link linkend="CryptUIKeyset">CryptUIKeyset</link>*      <link linkend="cryptui-key-store-get-keyset">cryptui_key_store_get_keyset</link>        (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore);
<link linkend="void">void</link>                <link linkend="cryptui-key-store-set-sortable">cryptui_key_store_set_sortable</link>      (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="gboolean">gboolean</link> sortable);
<link linkend="gboolean">gboolean</link>            <link linkend="cryptui-key-store-get-sortable">cryptui_key_store_get_sortable</link>      (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore);
<link linkend="void">void</link>                <link linkend="cryptui-key-store-check-toggled">cryptui_key_store_check_toggled</link>     (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreeView">GtkTreeView</link> *view,
                                                         <link linkend="GtkTreeIter">GtkTreeIter</link> *iter);
<link linkend="gboolean">gboolean</link>            <link linkend="cryptui-key-store-get-iter-from-key">cryptui_key_store_get_iter_from_key</link> (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="GtkTreeIter">GtkTreeIter</link> *iter);
const <link linkend="gchar">gchar</link>*        <link linkend="cryptui-key-store-get-key-from-iter">cryptui_key_store_get_key_from_iter</link> (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreeIter">GtkTreeIter</link> *iter);
const <link linkend="gchar">gchar</link>*        <link linkend="cryptui-key-store-get-key-from-path">cryptui_key_store_get_key_from_path</link> (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreePath">GtkTreePath</link> *path);
<link linkend="GList">GList</link>*              <link linkend="cryptui-key-store-get-all-keys">cryptui_key_store_get_all_keys</link>      (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore);
<link linkend="guint">guint</link>               <link linkend="cryptui-key-store-get-count">cryptui_key_store_get_count</link>         (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore);
<link linkend="gboolean">gboolean</link>            <link linkend="cryptui-key-store-have-selected-keys">cryptui_key_store_have_selected_keys</link>
                                                        (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreeView">GtkTreeView</link> *view);
<link linkend="GList">GList</link>*              <link linkend="cryptui-key-store-get-selected-keys">cryptui_key_store_get_selected_keys</link> (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreeView">GtkTreeView</link> *view);
<link linkend="void">void</link>                <link linkend="cryptui-key-store-set-selected-keys">cryptui_key_store_set_selected_keys</link> (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreeView">GtkTreeView</link> *view,
                                                         <link linkend="GList">GList</link> *keys);
const <link linkend="gchar">gchar</link>*        <link linkend="cryptui-key-store-get-selected-key">cryptui_key_store_get_selected_key</link>  (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreeView">GtkTreeView</link> *view);
<link linkend="void">void</link>                <link linkend="cryptui-key-store-set-selected-key">cryptui_key_store_set_selected_key</link>  (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreeView">GtkTreeView</link> *view,
                                                         const <link linkend="gchar">gchar</link> *key);
<link linkend="void">void</link>                <link linkend="cryptui-key-store-set-search-mode">cryptui_key_store_set_search_mode</link>   (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="CryptUIKeyStoreMode">CryptUIKeyStoreMode</link> mode);
<link linkend="void">void</link>                <link linkend="cryptui-key-store-set-search-text">cryptui_key_store_set_search_text</link>   (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         const <link linkend="gchar">gchar</link> *search_text);
<link linkend="void">void</link>                <link linkend="cryptui-key-store-set-filter">cryptui_key_store_set_filter</link>        (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="CryptUIKeyStoreFilterFunc">CryptUIKeyStoreFilterFunc</link> func,
                                                         <link linkend="gpointer">gpointer</link> user_data);
</synopsis>
</refsynopsisdiv>

<refsect1 id="CryptUIKeyStore.object-hierarchy" role="object_hierarchy">
<title role="object_hierarchy.title">Object Hierarchy</title>
<synopsis>
  <link linkend="GObject">GObject</link>
   +----<link linkend="GtkTreeModelSort">GtkTreeModelSort</link>
         +----CryptUIKeyStore
</synopsis>

</refsect1>



<refsect1 id="CryptUIKeyStore.implemented-interfaces" role="impl_interfaces">
<title role="impl_interfaces.title">Implemented Interfaces</title>
<para>
CryptUIKeyStore implements
 <link linkend="GtkTreeModel">GtkTreeModel</link>,  <link linkend="GtkTreeSortable">GtkTreeSortable</link> and  <link linkend="GtkTreeDragSource">GtkTreeDragSource</link>.</para>

</refsect1>


<refsect1 id="CryptUIKeyStore.properties" role="properties">
<title role="properties.title">Properties</title>
<synopsis>
  &quot;<link linkend="CryptUIKeyStore--keyset">keyset</link>&quot;                   <link linkend="CryptUIKeyset">CryptUIKeyset</link>*        : Read / Write / Construct Only
  &quot;<link linkend="CryptUIKeyStore--mode">mode</link>&quot;                     <link linkend="guint">guint</link>                 : Read / Write
  &quot;<link linkend="CryptUIKeyStore--none-option">none-option</link>&quot;              <link linkend="gchar">gchar</link>*                : Read / Write
  &quot;<link linkend="CryptUIKeyStore--search">search</link>&quot;                   <link linkend="gchar">gchar</link>*                : Read / Write
  &quot;<link linkend="CryptUIKeyStore--sortable">sortable</link>&quot;                 <link linkend="gboolean">gboolean</link>              : Read / Write
  &quot;<link linkend="CryptUIKeyStore--use-checks">use-checks</link>&quot;               <link linkend="gboolean">gboolean</link>              : Read / Write
</synopsis>
</refsect1>



<refsect1 id="CryptUIKeyStore.description" role="desc">
<title role="desc.title">Description</title>
<para>

</para>
</refsect1>

<refsect1 id="CryptUIKeyStore.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="CryptUIKeyStorePriv" role="struct">
<title>CryptUIKeyStorePriv</title>
<indexterm zone="CryptUIKeyStorePriv"><primary>CryptUIKeyStorePriv</primary></indexterm><programlisting>typedef struct _CryptUIKeyStorePriv CryptUIKeyStorePriv;</programlisting>
<para>

</para></refsect2>
<refsect2 id="CryptUIKeyStore-struct" role="struct">
<title>CryptUIKeyStore</title>
<indexterm zone="CryptUIKeyStore-struct"><primary>CryptUIKeyStore</primary></indexterm><programlisting>typedef struct {
    CryptUIKeyset          *ckset;
} CryptUIKeyStore;
</programlisting>
<para>

</para></refsect2>
<refsect2 id="CryptUIKeyStoreMode" role="enum">
<title>enum CryptUIKeyStoreMode</title>
<indexterm zone="CryptUIKeyStoreMode"><primary>CryptUIKeyStoreMode</primary></indexterm><programlisting>typedef enum _CryptUIKeyStoreMode {
    CRYPTUI_KEY_STORE_MODE_ALL,
    CRYPTUI_KEY_STORE_MODE_SELECTED,
    CRYPTUI_KEY_STORE_MODE_RESULTS
} CryptUIKeyStoreMode;
</programlisting>
<para>

</para></refsect2>
<refsect2 id="CryptUIKeyStoreFilterFunc" role="function">
<title>CryptUIKeyStoreFilterFunc ()</title>
<indexterm zone="CryptUIKeyStoreFilterFunc"><primary>CryptUIKeyStoreFilterFunc</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            (*CryptUIKeyStoreFilterFunc)        (<link linkend="CryptUIKeyset">CryptUIKeyset</link> *ckset,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ckset</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-new" role="function">
<title>cryptui_key_store_new ()</title>
<indexterm zone="cryptui-key-store-new"><primary>cryptui_key_store_new</primary></indexterm><programlisting><link linkend="CryptUIKeyStore">CryptUIKeyStore</link>*    cryptui_key_store_new               (<link linkend="CryptUIKeyset">CryptUIKeyset</link> *keyset,
                                                         <link linkend="gboolean">gboolean</link> use_checks,
                                                         const <link linkend="gchar">gchar</link> *none_option);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>keyset</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>use_checks</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>none_option</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-get-keyset" role="function">
<title>cryptui_key_store_get_keyset ()</title>
<indexterm zone="cryptui-key-store-get-keyset"><primary>cryptui_key_store_get_keyset</primary></indexterm><programlisting><link linkend="CryptUIKeyset">CryptUIKeyset</link>*      cryptui_key_store_get_keyset        (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-set-sortable" role="function">
<title>cryptui_key_store_set_sortable ()</title>
<indexterm zone="cryptui-key-store-set-sortable"><primary>cryptui_key_store_set_sortable</primary></indexterm><programlisting><link linkend="void">void</link>                cryptui_key_store_set_sortable      (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="gboolean">gboolean</link> sortable);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>sortable</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-get-sortable" role="function">
<title>cryptui_key_store_get_sortable ()</title>
<indexterm zone="cryptui-key-store-get-sortable"><primary>cryptui_key_store_get_sortable</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            cryptui_key_store_get_sortable      (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-check-toggled" role="function">
<title>cryptui_key_store_check_toggled ()</title>
<indexterm zone="cryptui-key-store-check-toggled"><primary>cryptui_key_store_check_toggled</primary></indexterm><programlisting><link linkend="void">void</link>                cryptui_key_store_check_toggled     (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreeView">GtkTreeView</link> *view,
                                                         <link linkend="GtkTreeIter">GtkTreeIter</link> *iter);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>view</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-get-iter-from-key" role="function">
<title>cryptui_key_store_get_iter_from_key ()</title>
<indexterm zone="cryptui-key-store-get-iter-from-key"><primary>cryptui_key_store_get_iter_from_key</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            cryptui_key_store_get_iter_from_key (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         const <link linkend="gchar">gchar</link> *key,
                                                         <link linkend="GtkTreeIter">GtkTreeIter</link> *iter);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-get-key-from-iter" role="function">
<title>cryptui_key_store_get_key_from_iter ()</title>
<indexterm zone="cryptui-key-store-get-key-from-iter"><primary>cryptui_key_store_get_key_from_iter</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link>*        cryptui_key_store_get_key_from_iter (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreeIter">GtkTreeIter</link> *iter);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>iter</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-get-key-from-path" role="function">
<title>cryptui_key_store_get_key_from_path ()</title>
<indexterm zone="cryptui-key-store-get-key-from-path"><primary>cryptui_key_store_get_key_from_path</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link>*        cryptui_key_store_get_key_from_path (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreePath">GtkTreePath</link> *path);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>path</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-get-all-keys" role="function">
<title>cryptui_key_store_get_all_keys ()</title>
<indexterm zone="cryptui-key-store-get-all-keys"><primary>cryptui_key_store_get_all_keys</primary></indexterm><programlisting><link linkend="GList">GList</link>*              cryptui_key_store_get_all_keys      (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-get-count" role="function">
<title>cryptui_key_store_get_count ()</title>
<indexterm zone="cryptui-key-store-get-count"><primary>cryptui_key_store_get_count</primary></indexterm><programlisting><link linkend="guint">guint</link>               cryptui_key_store_get_count         (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-have-selected-keys" role="function">
<title>cryptui_key_store_have_selected_keys ()</title>
<indexterm zone="cryptui-key-store-have-selected-keys"><primary>cryptui_key_store_have_selected_keys</primary></indexterm><programlisting><link linkend="gboolean">gboolean</link>            cryptui_key_store_have_selected_keys
                                                        (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreeView">GtkTreeView</link> *view);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>view</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-get-selected-keys" role="function">
<title>cryptui_key_store_get_selected_keys ()</title>
<indexterm zone="cryptui-key-store-get-selected-keys"><primary>cryptui_key_store_get_selected_keys</primary></indexterm><programlisting><link linkend="GList">GList</link>*              cryptui_key_store_get_selected_keys (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreeView">GtkTreeView</link> *view);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>view</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-set-selected-keys" role="function">
<title>cryptui_key_store_set_selected_keys ()</title>
<indexterm zone="cryptui-key-store-set-selected-keys"><primary>cryptui_key_store_set_selected_keys</primary></indexterm><programlisting><link linkend="void">void</link>                cryptui_key_store_set_selected_keys (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreeView">GtkTreeView</link> *view,
                                                         <link linkend="GList">GList</link> *keys);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>view</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>keys</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-get-selected-key" role="function">
<title>cryptui_key_store_get_selected_key ()</title>
<indexterm zone="cryptui-key-store-get-selected-key"><primary>cryptui_key_store_get_selected_key</primary></indexterm><programlisting>const <link linkend="gchar">gchar</link>*        cryptui_key_store_get_selected_key  (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreeView">GtkTreeView</link> *view);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>view</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><emphasis>Returns</emphasis>&nbsp;:</term><listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-set-selected-key" role="function">
<title>cryptui_key_store_set_selected_key ()</title>
<indexterm zone="cryptui-key-store-set-selected-key"><primary>cryptui_key_store_set_selected_key</primary></indexterm><programlisting><link linkend="void">void</link>                cryptui_key_store_set_selected_key  (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="GtkTreeView">GtkTreeView</link> *view,
                                                         const <link linkend="gchar">gchar</link> *key);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>view</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>key</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-set-search-mode" role="function">
<title>cryptui_key_store_set_search_mode ()</title>
<indexterm zone="cryptui-key-store-set-search-mode"><primary>cryptui_key_store_set_search_mode</primary></indexterm><programlisting><link linkend="void">void</link>                cryptui_key_store_set_search_mode   (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="CryptUIKeyStoreMode">CryptUIKeyStoreMode</link> mode);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>mode</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-set-search-text" role="function">
<title>cryptui_key_store_set_search_text ()</title>
<indexterm zone="cryptui-key-store-set-search-text"><primary>cryptui_key_store_set_search_text</primary></indexterm><programlisting><link linkend="void">void</link>                cryptui_key_store_set_search_text   (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         const <link linkend="gchar">gchar</link> *search_text);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>search_text</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="cryptui-key-store-set-filter" role="function">
<title>cryptui_key_store_set_filter ()</title>
<indexterm zone="cryptui-key-store-set-filter"><primary>cryptui_key_store_set_filter</primary></indexterm><programlisting><link linkend="void">void</link>                cryptui_key_store_set_filter        (<link linkend="CryptUIKeyStore">CryptUIKeyStore</link> *ckstore,
                                                         <link linkend="CryptUIKeyStoreFilterFunc">CryptUIKeyStoreFilterFunc</link> func,
                                                         <link linkend="gpointer">gpointer</link> user_data);</programlisting>
<para>

</para><variablelist role="params">
<varlistentry><term><parameter>ckstore</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>func</parameter>&nbsp;:</term>
<listitem><simpara>
</simpara></listitem></varlistentry>
<varlistentry><term><parameter>user_data</parameter>&nbsp;:</term>
<listitem><simpara>


</simpara></listitem></varlistentry>
</variablelist></refsect2>

</refsect1>
<refsect1 id="CryptUIKeyStore.property-details" role="property_details">
<title role="property_details.title">Property Details</title>
<refsect2 id="CryptUIKeyStore--keyset"><title>The <literal>&quot;keyset&quot;</literal> property</title>
<indexterm zone="CryptUIKeyStore--keyset"><primary>CryptUIKeyStore:keyset</primary></indexterm><programlisting>  &quot;keyset&quot;                   <link linkend="CryptUIKeyset">CryptUIKeyset</link>*        : Read / Write / Construct Only</programlisting>
<para>Current CryptUI Key Source to use.</para></refsect2>
<refsect2 id="CryptUIKeyStore--mode"><title>The <literal>&quot;mode&quot;</literal> property</title>
<indexterm zone="CryptUIKeyStore--mode"><primary>CryptUIKeyStore:mode</primary></indexterm><programlisting>  &quot;mode&quot;                     <link linkend="guint">guint</link>                 : Read / Write</programlisting>
<para>Key store mode controls which keys to display.</para><para>Allowed values: &lt;= 2</para>
<para>Default value: 0</para>
</refsect2>
<refsect2 id="CryptUIKeyStore--none-option"><title>The <literal>&quot;none-option&quot;</literal> property</title>
<indexterm zone="CryptUIKeyStore--none-option"><primary>CryptUIKeyStore:none-option</primary></indexterm><programlisting>  &quot;none-option&quot;              <link linkend="gchar">gchar</link>*                : Read / Write</programlisting>
<para>Text for row that denotes 'No Selection'.</para><para>Default value: ""</para>
</refsect2>
<refsect2 id="CryptUIKeyStore--search"><title>The <literal>&quot;search&quot;</literal> property</title>
<indexterm zone="CryptUIKeyStore--search"><primary>CryptUIKeyStore:search</primary></indexterm><programlisting>  &quot;search&quot;                   <link linkend="gchar">gchar</link>*                : Read / Write</programlisting>
<para>Key store search text for when in results mode.</para><para>Default value: ""</para>
</refsect2>
<refsect2 id="CryptUIKeyStore--sortable"><title>The <literal>&quot;sortable&quot;</literal> property</title>
<indexterm zone="CryptUIKeyStore--sortable"><primary>CryptUIKeyStore:sortable</primary></indexterm><programlisting>  &quot;sortable&quot;                 <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>Allow user to sort columns.</para><para>Default value: FALSE</para>
</refsect2>
<refsect2 id="CryptUIKeyStore--use-checks"><title>The <literal>&quot;use-checks&quot;</literal> property</title>
<indexterm zone="CryptUIKeyStore--use-checks"><primary>CryptUIKeyStore:use-checks</primary></indexterm><programlisting>  &quot;use-checks&quot;               <link linkend="gboolean">gboolean</link>              : Read / Write</programlisting>
<para>Use check box column to denote selection.</para><para>Default value: FALSE</para>
</refsect2>

</refsect1>




</refentry>
